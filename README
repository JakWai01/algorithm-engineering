# Algorithm Engineering Exercise 1

## Notiz

Ich war leider bis zum letzten Moment dabei die Arc Flags zu debuggen und habe deswegen die Visualisierung noch nicht ganz durch. Das würde ich noch nachreichen, wenn es okay ist. Die Arc Flags sollten jetzt eigentlich funktionieren, ich hatte nur noch nicht die Gelegenheit sie voll durchlaufen zu lassen. PHAST und CH (bidirektional) funktionieren gut und sind getestet :) Ich werde versuchen die restlichen Dinge so schnell wie möglich nachzubessern.

## Usage

### Die optimierte Binary bauen 

Rust installieren

```
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
```

Im Hauptverzeichnis den folgenden Befehl ausführen

```
cargo b --release
```

### Ausführen

Im Hauptverzeichnis den folgenden Befehl ausführen

```
./target/release/algorithm-engineering <graph e.g. stgtregbz.fmi> <source-target-tuples e.g. examples/input_stg> <m> <n>
```

### Example Output Waibel.t0

```
377371 754742 436627 802us
377371 754743 435351 777us
377371 754744 437063 907us
377371 754745 435471 869us
377371 754746 438107 867us
377371 754747 438051 822us
377371 754748 436052 842us
377371 754749 438168 868us
377371 754750 437887 849us
377371 754751 435675 839us
```

### Example Output Waibel.t1

```
0 307636
1 306520
2 310111
3 311382
4 312548
5 320697
6 319141
7 322498
8 323921
9 324877
10 326104
```

## Notes 

- Phast time 66ms
- Reverse edges etc könnten eigentlich nur referenzen auf den Main array speichern
- Für ArcFlags Rust bitvec
- Auspacken sparen
- Der Dijkstra darf auch über die Shortcuts laufen, wir bekommen korrekte Distanzen
- Wir brauchen den Pfad nicht!
- 1x1 Box sollte sich verhalten wie Dijkstra
- Nur 2 Zellen testen
- Der Umgekehrte Pfad geht ja nur bis zum Boundary Edge, die Suche zum Boundary ist dann vorwärts

0. Don't use Dijkstra Objects for everything. Remove overhead as much as possible -> Decompose
1. Speedup Phast
2. Don't sort
