# Algorithm Engineering Exercise 1

## Usage

### Die optimierte Binary bauen 

Rust installieren

```
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
```

Im Hauptverzeichnis den folgenden Befehl ausführen

```
cargo b --release
```

### Ausführen

Im Hauptverzeichnis den folgenden Befehl ausfüHauptverzeichnis

```
./target/release/algorithm-engineering <graph e.g. stgtregbz.fmi> <source-target-tuples e.g. examples/input_stg>
```

## Benchmarks (Regierungsbezirk Stuttgart)

**Laufzeit Zusammenhangskomponenten**: 393ms (1385 Komponenten)
**Laufzeit 100 random source-target pairs**: 9738ms

## Benchmarks (Deutschland)

**Laufzeit Zusammenhangskomponenten**:  11863ms (25246 Komponenten)
**Laufzeit 100 random source-target pairs**: 377073ms

## Output (Stuttgart stgtregbz.tab) 

```
Reading graph from file: /home/jakob/Documents/master/algorithm-engineering/exercises/01/stgtregbz.fmi
Number of vertices: 1132113
Number of edges: 2292887
Reading source-target pairs from file: examples/input_stg
Number of connected components 1385 took 388 ms to execute
377371 754742 436627 159
377371 754743 435351 159
377371 754744 437063 159
377371 754745 435471 160
377371 754746 438107 159
377371 754747 438051 159
377371 754748 436052 159
377371 754749 438168 160
377371 754750 437887 160
377371 754751 435675 159
377372 754742 436726 160
377372 754743 435450 159
377372 754744 437162 160
377372 754745 435570 162
377372 754746 438206 160
377372 754747 438150 160
377372 754748 436151 159
377372 754749 438267 160
377372 754750 437986 160
377372 754751 435774 158
377373 754742 436791 161
377373 754743 435515 159
377373 754744 437227 161
377373 754745 435635 161
377373 754746 438271 168
377373 754747 438215 166
377373 754748 436216 165
377373 754749 438332 165
377373 754750 438051 164
377373 754751 435839 165
377374 754742 436920 164
377374 754743 435644 160
377374 754744 437356 162
377374 754745 435764 159
377374 754746 438400 160
377374 754747 438344 160
377374 754748 436345 160
377374 754749 438461 159
377374 754750 438180 160
377374 754751 435968 159
377375 754742 437028 159
377375 754743 435752 158
377375 754744 437464 160
377375 754745 435872 159
377375 754746 438508 161
377375 754747 438452 159
377375 754748 436453 160
377375 754749 438569 160
377375 754750 438288 160
377375 754751 436076 159
377376 754742 437160 167
377376 754743 435884 165
377376 754744 437596 160
377376 754745 436004 159
377376 754746 438640 160
377376 754747 438584 161
377376 754748 436585 159
377376 754749 438701 161
377376 754750 438420 160
377376 754751 436208 159
377377 754742 437280 160
377377 754743 436004 158
377377 754744 437716 159
377377 754745 436124 160
377377 754746 438760 160
377377 754747 438704 161
377377 754748 436705 159
377377 754749 438821 160
377377 754750 438540 159
377377 754751 436328 159
377378 754742 437448 159
377378 754743 436172 159
377378 754744 437884 159
377378 754745 436292 158
377378 754746 438928 160
377378 754747 438872 160
377378 754748 436873 159
377378 754749 438989 160
377378 754750 438708 159
377378 754751 436496 159
377379 754742 438049 159
377379 754743 436773 159
377379 754744 438485 161
377379 754745 436893 159
377379 754746 439529 159
377379 754747 439473 165
377379 754748 437474 159
377379 754749 439590 159
377379 754750 439309 161
377379 754751 437097 159
377380 754742 438198 159
377380 754743 436922 161
377380 754744 438634 159
377380 754745 437042 159
377380 754746 439678 160
377380 754747 439622 160
377380 754748 437623 159
377380 754749 439739 159
377380 754750 439458 161
377380 754751 437246 161
```

## Execution log (Deutschland ger.tab)

```
Reading graph from file: /home/jakob/Documents/master/algorithm-engineering/exercises/01/germany.fmi
Number of vertices: 25115477
Number of edges: 50790030
Reading source-target pairs from file: examples/input_ger
Number of connected components 25246 took 11863 ms to execute
8371825 16743651 648681 956
8371825 16743652 649433 965
8371825 16743653 666379 1000
8371825 16743654 648777 959
8371825 16743655 649372 957
8371825 16743656 649304 959
8371825 16743657 648885 976
8371825 16743658 649227 960
8371825 16743659 649163 958
8371825 16743660 648996 961
8371826 16743651 643470 948
8371826 16743652 644222 950
8371826 16743653 661168 999
8371826 16743654 643566 951
8371826 16743655 644161 949
8371826 16743656 644093 953
8371826 16743657 643674 953
8371826 16743658 644016 945
8371826 16743659 643952 945
8371826 16743660 643785 946
8371827 16743651 991950 1195
8371827 16743652 992702 1198
8371827 16743653 1009648 1249
8371827 16743654 992046 1198
8371827 16743655 992641 1201
8371827 16743656 992573 1197
8371827 16743657 992154 1199
8371827 16743658 992496 1198
8371827 16743659 992432 1201
8371827 16743660 992265 1198
8371828 16743651 992243 1202
8371828 16743652 992995 1196
8371828 16743653 1009941 1234
8371828 16743654 992339 1194
8371828 16743655 992934 1195
8371828 16743656 992866 1194
8371828 16743657 992447 1196
8371828 16743658 992789 1195
8371828 16743659 992725 1208
8371828 16743660 992558 1195
8371829 16743651 992534 1196
8371829 16743652 993286 1197
8371829 16743653 1010232 1238
8371829 16743654 992630 1194
8371829 16743655 993225 1196
8371829 16743656 993157 1198
8371829 16743657 992738 1197
8371829 16743658 993080 1208
8371829 16743659 993016 1201
8371829 16743660 992849 1204
8371830 16743651 994232 1203
8371830 16743652 994984 1205
8371830 16743653 1011930 1241
8371830 16743654 994328 1202
8371830 16743655 994923 1205
8371830 16743656 994855 1213
8371830 16743657 994436 1202
8371830 16743658 994778 1204
8371830 16743659 994714 1204
8371830 16743660 994547 1205
8371831 16743651 1136500 4887
8371831 16743652 1137252 4928
8371831 16743653 1157526 5058
8371831 16743654 1136596 4877
8371831 16743655 1137191 4893
8371831 16743656 1137123 4892
8371831 16743657 1136704 4871
8371831 16743658 1137046 4900
8371831 16743659 1136982 4896
8371831 16743660 1136815 4901
8371832 16743651 1134297 4885
8371832 16743652 1135049 4905
8371832 16743653 1155323 5041
8371832 16743654 1134393 4899
8371832 16743655 1134988 4864
8371832 16743656 1134920 4892
8371832 16743657 1134501 4889
8371832 16743658 1134843 4898
8371832 16743659 1134779 4860
8371832 16743660 1134612 4893
8371833 16743651 1134714 4875
8371833 16743652 1135466 4889
8371833 16743653 1155740 5029
8371833 16743654 1134810 4896
8371833 16743655 1135405 4886
8371833 16743656 1135337 4940
8371833 16743657 1134918 4885
8371833 16743658 1135260 4903
8371833 16743659 1135196 4908
8371833 16743660 1135029 4905
8371834 16743651 1133712 4878
8371834 16743652 1134464 4928
8371834 16743653 1154738 5050
8371834 16743654 1133808 4833
8371834 16743655 1134403 5144
8371834 16743656 1134335 4924
8371834 16743657 1133916 4901
8371834 16743658 1134258 5241
8371834 16743659 1134194 4982
8371834 16743660 1134027 4929
```


## Note 

- Understand Contraction Hierarchies better. Will we automatically take the shortcut in favor of the normal edge although the path has the same weight in total?
- Vorgängerkante statt Vorgängerknoten speichern
- Von unendlich auf was kleineres -> Knoten in visited array und counter eins hoch. Was ist der Counter vom Visited array 
- Extra array für Vorgänger
- Eine iteration überall eingehenden Kanten für stall on demand
- Eingehenden Kanten mit Node speichern (separates Offset array)
- PHAST = Dijkstra + 1 mal drüber iterieren und relaxieren
- Abbruchkriterium wenn die Distanz größer wird?
- 1 visited liste mit Knoten IDs wo wir rumgepfuscht haben
    - Für jeden Knoten: Distanz von source, distanz von target -> Wenn weniger als bisher gesehen passt es (Stimmt das oder muss es mehr sein - dreiecksungleichung)
- Cache-effizient mit sortierung nach Level